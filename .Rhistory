summary_ajuste
VasicekCalibration <- function(fred.ticker = 'DGS3MO', dt = 1/252) {
# Calibrates the vasicek model using the maximum likelihood estimator. Details
# about the maximum likelihood extomator are at the link below.
#
# http://www.sitmo.com/article/calibrating-the-ornstein-uhlenbeck-model/
#
# TODO - Add in start and end dates.
#
# Args:
#   fred.ticker: Ticker used to download the historical rates from the Federal
#                Reserve Bank of St Louis. Defaults to DSG3MO, the 3-Month
#                Treasury Constant Maturity Rate.
#   dt: The change in time between observations. Defaults to 1/252 because
#       we assume generation of daily rates and there are 252 trading days
#       per year.
#
# Returns:
#   A vector of the form c(kappa, theta, sigma, r0), where kappa is the mean
#   reversion rate, theta is the long-term rate/mean, sigma is the volatility
#   and r0 is the last observed rate.
#
# Requires:
#   quantmod
require(quantmod)
data <- getSymbols(fred.ticker, src = 'FRED', auto.assign = FALSE)
data <- na.omit(data)/100 # FRED quotes 1.00% as 1.00 instead of 0.01
n <- length(data)
# do the calculations
Sx <- sum(data[1:(length(data) - 1)])
Sy <- sum(data[2:length(data)])
Sxx <- as.numeric(crossprod(data[1:(length(data) - 1)], data[1:(length(data) - 1)]))
Sxy <- as.numeric(crossprod(data[1:(length(data) - 1)], data[2:length(data)]))
Syy <- as.numeric(crossprod(data[2:length(data)], data[2:length(data)]))
theta  <- (Sy * Sxx - Sx * Sxy) / (n* (Sxx - Sxy) - (Sx^2 - Sx*Sy) )
kappa <- -log((Sxy - theta * Sx - theta * Sy + n * theta^2) /   (Sxx - 2 * theta * Sx + n * theta^2)) / dt
a <- exp(-kappa*dt)
sigmah2 <- (Syy - 2 * a * Sxy + a^2 * Sxx - 2 * theta * (1-a) * (Sy - a * Sx) + n * theta^2 * (1 - a)^2)/n
sigma <- sqrt(sigmah2 * 2 * kappa / (1 - a^2))
r0 <- data[length(data)]
return(c(kappa, theta, sigma, r0))
}
calibration <- VasicekCalibration() # 3MO produces alot of negatve rates
kappa <- calibration[1]
theta <- calibration[2]
sigma <- calibration[3]
r0 <- calibration[4]
calibration
calibration <- VasicekCalibration(data_df$X3.month)
VasicekCalibration <- function(DATOS) {
# Calibrates the vasicek model using the maximum likelihood estimator. Details
# about the maximum likelihood extomator are at the link below.
#
# http://www.sitmo.com/article/calibrating-the-ornstein-uhlenbeck-model/
#
# TODO - Add in start and end dates.
#
# Args:
#   fred.ticker: Ticker used to download the historical rates from the Federal
#                Reserve Bank of St Louis. Defaults to DSG3MO, the 3-Month
#                Treasury Constant Maturity Rate.
#   dt: The change in time between observations. Defaults to 1/252 because
#       we assume generation of daily rates and there are 252 trading days
#       per year.
#
# Returns:
#   A vector of the form c(kappa, theta, sigma, r0), where kappa is the mean
#   reversion rate, theta is the long-term rate/mean, sigma is the volatility
#   and r0 is the last observed rate.
#
data <- DATOS
data <- na.omit(data)/100 # FRED quotes 1.00% as 1.00 instead of 0.01
n <- length(data)
# do the calculations
Sx <- sum(data[1:(length(data) - 1)])
Sy <- sum(data[2:length(data)])
Sxx <- as.numeric(crossprod(data[1:(length(data) - 1)], data[1:(length(data) - 1)]))
Sxy <- as.numeric(crossprod(data[1:(length(data) - 1)], data[2:length(data)]))
Syy <- as.numeric(crossprod(data[2:length(data)], data[2:length(data)]))
theta  <- (Sy * Sxx - Sx * Sxy) / (n* (Sxx - Sxy) - (Sx^2 - Sx*Sy) )
kappa <- -log((Sxy - theta * Sx - theta * Sy + n * theta^2) /   (Sxx - 2 * theta * Sx + n * theta^2)) / dt
a <- exp(-kappa*dt)
sigmah2 <- (Syy - 2 * a * Sxy + a^2 * Sxx - 2 * theta * (1-a) * (Sy - a * Sx) + n * theta^2 * (1 - a)^2)/n
sigma <- sqrt(sigmah2 * 2 * kappa / (1 - a^2))
r0 <- data[length(data)]
return(c(kappa, theta, sigma, r0))
}
calibration <- VasicekCalibration(data_df$X3.month)
calibration
simular_vasicek <- function(rates, a, b, sigma, T, n_steps, n_simulations) {
dt <- T / n_steps
rate_rolling <- vector()
mb_list <- list()
for (r in rates) {
rates_predict <- vector()
mb <- vector()
for (i in 1:n_simulations) {
dr <- a * (b - r) * dt + sigma * rnorm(1, mean = 0, sd = sqrt(dt))
rates_predict <- c(rates_predict, max(0, r + dr))
mb <- c(mb, r * dr)
}
mb_list[[length(mb_list) + 1]] <- mb
r_predict <- mean(rates_predict)
rate_rolling <- c(rate_rolling, r_predict)
}
return(list(rate_rolling, mb_list))
}
T = 1.0    # Horizonte temporal (1 año)
n_steps = 10  # Número de pasos de tiempo
n_simulations = 100
T <-  1.0    # Horizonte temporal (1 año)
n_steps <-  10  # Número de pasos de tiempo
n_simulations <-  100
# Llamar a la función para simular el modelo Vasicek
resultados_vasicek <- simular_vasicek(data_df$X3.month, -0.098657617, -0.003537282, 0.006586372, T, n_steps, n_simulations)
# Extraer las tasas simuladas y el movimiento Browniano
tasas_simuladas_vasicek <- resultados_vasicek[[1]]
movi_brown_vasicek <- resultados_vasicek[[2]]
plot(three_month_list, type = "l", col = "blue", lwd = 2, ylim = c(min(three_month_list, tasas_simuladas_vasicek), max(three_month_list, tasas_simuladas_vasicek)),
xlab = "Paso de Tiempo", ylab = "Tasa de Interés", main = "Simulación de Tasas de Interés con Vasicek Frecuentista")
# Gráfico de las tasas de interés simuladas
plot(three_month_list, type = "l", col = "blue", lwd = 2, ylim = c(min(data_df$X3.month, tasas_simuladas_vasicek), max(three_month_list, tasas_simuladas_vasicek)),
xlab = "Paso de Tiempo", ylab = "Tasa de Interés", main = "Simulación de Tasas de Interés con Vasicek Frecuentista")
# Gráfico de las tasas de interés simuladas
plot(data_df$X3.month, type = "l", col = "blue", lwd = 2, ylim = c(min(data_df$X3.month, tasas_simuladas_vasicek), max(three_month_list, tasas_simuladas_vasicek)),
xlab = "Paso de Tiempo", ylab = "Tasa de Interés", main = "Simulación de Tasas de Interés con Vasicek Frecuentista")
# Gráfico de las tasas de interés simuladas
plot(data_df$X3.month, type = "l", col = "blue", lwd = 2, ylim = c(min(data_df$X3.month, tasas_simuladas_vasicek), max(data_df$X3.month, tasas_simuladas_vasicek)),
xlab = "Paso de Tiempo", ylab = "Tasa de Interés", main = "Simulación de Tasas de Interés con Vasicek Frecuentista")
# Eliminar valores faltantes de los datos originales y de las tasas simuladas
datos_no_faltantes <- na.omit(data_df$X3.month)
tasas_simuladas_no_faltantes <- na.omit(tasas_simuladas_vasicek)
# Calcular los límites basados en los datos sin valores faltantes
y_lim_min <- min(c(datos_no_faltantes, tasas_simuladas_no_faltantes))
y_lim_max <- max(c(datos_no_faltantes, tasas_simuladas_no_faltantes))
# Graficar con los límites calculados
plot(data_df$X3.month, type = "l", col = "blue", lwd = 2, ylim = c(y_lim_min, y_lim_max),
xlab = "Paso de Tiempo", ylab = "Tasa de Interés", main = "Simulación de Tasas de Interés con Vasicek Frecuentista")
datosf <- read.csv("BONOS - FOMC.csv")
datos <- read.csv("BONOS - 3-meses.csv")
# Divide los datos en
datosf$FOMC=datosf$FOMC/100
datos$X3.month=datos$X3.month/100
# Convierte las columnas a tipo numérico
datosf$FOMC <- as.numeric(datosf$FOMC)
datos$X3.month <- as.numeric(datos$X3.month)
# Elimina filas con valores ND en X20.year
datosf <- datosf[!is.na(datosf$FOMC), ]
datos <- datos[!is.na(datos$X3.month), ]
parametros <- data.frame(
Modelo = c("Bayesiano", "Frecuentista"),
media_alpha = c(0, 1),
media_b = c(2, 3),
media_sigma = c(4, 5),
)
parametros <- data.frame(
Modelo = c("Bayesiano", "Frecuentista"),
media_alpha = c(0, 1),
media_b = c(2, 3),
media_sigma = c(4, 5)
)
parametros
media_alpha
parametros <- data.frame(
Modelo = c("Bayesiano", "Frecuentista"),
media_alpha = c(media_alpha, kappa),
media_b = c(media_b, theta),
media_sigma = c(media_sigma, sigma)
)
parametros
calibration <- VasicekCalibration(data_df$X3.month)
calibration
kappa <- calibration[1]
theta <- calibration[2]
sigma <- calibration[3]
parametros <- data.frame(
Modelo = c("Bayesiano", "Frecuentista"),
media_alpha = c(media_alpha, kappa),
media_b = c(media_b, theta),
media_sigma = c(media_sigma, sigma)
)
parametros
write.csv(parametros, "parametros_modelos.csv", row.names = FALSE)
# Cargar Librerias
library(rstan)
library(ggplot2)
# ---------------------------------------------------------------
# MODELO VASICEK
# Los codigos se implementaron de https://github.com/bickez/puppy-economics/blob/master/vasicek.R
# Para la estimacion Frecuentista  y las siguientes funciones necesarias
VasicekHelper <- function(r, kappa, theta, sigma, dt = 1/252) {
# Helper function that calculates the next rate based on the discretization
# of the Varice model.
#
# Args:
#   r: The interest rate used to generate the next interest rate.
#   kappa: The mean reversion rate.
#   theta: The mean rate or long term rate.
#   sigma: Volatility.
#   dt: The change in time between observations. Defaults to 1/252 because
#       we assume generation of daily rates and there are 252 trading days
#       per year.
#
# Returns:
#   A vector of simulated short rates.
term1 <- exp(-1 * kappa * dt)
term2 <- (sigma^2) * (1 - term1^2) / (2*kappa)
result <- r*term1 + theta*(1-term1) + sqrt(term2)*rnorm(n=1)
return(result)
}
VasicekSimulation <- function(N, r0, kappa, theta, sigma, dt = 1/252) {
# Generates a single short rate simulation using the Vasicek model.
#
# Args:
#   N: The number of points to generate in each simulation. For example,
#      the number of days when simulating daily rates.
#   r0: The initial interest rate.
#   kappa: The mean reversion rate.
#   theta: The mean rate or long term rate.
#   sigma: Volatility.
#   dt: The change in time between observations. Defaults to 1/252 because
#       we assume generation of daily rates and there are 252 trading days
#       per year.
#
# Returns:
#   A vector of simulated short rates.
short.rates <- rep(0, N)
short.rates[1] <- r0
for (i in 2:N) {
short.rates[i] <- VasicekHelper(short.rates[i - 1], kappa, theta, sigma, dt)
}
return(short.rates)
}
VasicekSimulations <- function(M, N, r0, kappa, theta, sigma, dt = 1/252) {
# Generates several short rate simulations using the Vasicek model.
#
# Args:
#   M: The number of simulations to run.
#   N: The number of points to generate in each simulation. For example,
#      the number of days when simulating daily rates.
#   r0: The initial interest rate.
#   kappa: The mean reversion rate.
#   theta: The mean rate or long term rate.
#   sigma: Volatility.
#   dt: The change in time between observations. Defaults to 1/252 because
#       we assume generation of daily rates and there are 252 trading days
#       per year.
#
# Returns:
#   An N row by M column matrix of simulated short rates.
sim.mat <- matrix(nrow = N, ncol = M)
for (i in 1:M) {
sim.mat[, i] <- VasicekSimulation(N, r0, kappa, theta, sigma, dt)
}
return(sim.mat)
}
VasicekZeroCouponBondPrice <- function(r0, kappa, theta, sigma, years) {
# Calculates th zero coupon bond price.
#
# Args:
#   r0: The initial interest rate.
#   kappa: The mean reversion rate.
#   theta: The mean rate or long term rate.
#   sigma: Volatility.
#   years: The length or maturity of the bond.
#
# Returns:
#   A decimal price of the bond (i.e. 0.98 for 98).
b.vas <- (1-exp(-years*kappa)) / kappa
a.vas <- (theta-sigma^2/(2*kappa^2))*(years-b.vas)+(sigma^2)/(4*kappa)*b.vas^2
return(exp(-a.vas-b.vas*r0))
}
VasicekYieldCurve <- function(r0, kappa, theta, sigma, max.maturity=10) {
# Produces a yield curve from the Vasicek model with maturities ranging
# from 1 year to max.maturity.
#
# Args:
#   r0: The initial interest rate.
#   kappa: The mean reversion rate.
#   theta: The mean rate or long term rate.
#   sigma: Volatility.
#   max.maturity: Maximum maturity in years (must be integer).
#
# Returns:
#   A decimal price of the bond (i.e. 0.98 for 98).
yields <- rep(0, max.maturity)
for (y in 1:max.maturity) {
yields[y] <- -log(VasicekZeroCouponBondPrice(r0, kappa, theta, sigma, y))/y
}
return(yields)
}
# ---------------------------------------------------------------
# 2. Cargar Datos, Fuente https://www.federalreserve.gov/data.htm
datosf <- read.csv("BONOS - FOMC.csv")
datos <- read.csv("BONOS - 3-meses.csv")
# Divide los datos en
datosf$FOMC=datosf$FOMC/100
datos$X3.month=datos$X3.month/100
# Convierte las columnas a tipo numérico
datosf$FOMC <- as.numeric(datosf$FOMC)
datos$X3.month <- as.numeric(datos$X3.month)
# Elimina filas con valores ND
datosf <- datosf[!is.na(datosf$FOMC), ]
datos <- datos[!is.na(datos$X3.month), ]
# ---------------------------------------------------------------
# 3. Análisis exploratorio de datos (EDA)
# Correlación de Pearson
correlacion_pearson <- cor(datosf$FOMC, datos$X3.month, method = "pearson")
# Correlación de Kendall
correlacion_kendall <- cor(datosf$FOMC, datos$X3.month, method = "kendall")
# Correlación de Spearman
correlacion_spearman <- cor(datosf$FOMC, datos$X3.month, method = "spearman")
# Imprimir los resultados
print(paste("Correlación de Pearson:", correlacion_pearson))
print(paste("Correlación de Kendall:", correlacion_kendall))
print(paste("Correlación de Spearman:", correlacion_spearman))
# Desviación estándar de FOMC
sd_fomc <- sd(datosf$FOMC)
# Desviación estándar de X3.month
sd_x3_month <- sd(datos$X3.month)
# Imprimir los resultados
print(paste("Desviación estándar de FOMC:", sd_fomc))
print(paste("Desviación estándar de X3.month:", sd_x3_month))
#GRAFICOS
plot(datosf$FOMC, type = "l", col = "blue", main = "Gráfico de FOMC", xlab = "Índice", ylab = "Valor")
plot(datos$X3.month, type = "l", col = "red", main = "Gráfico de X3.month", xlab = "Índice", ylab = "Valor")
# ---------------------------------------------------------------
# ---------------------------------------------------------------
# 4. Estimación bayesiana
# Datos para Bayesiana
datos_stan <- list(N = nrow(datos),
r = datos$X3.month,
dt = 1) # Ajusta dt según la frecuencia de tus datos
# Define el modelo de Stan como una cadena de texto
modelo_vasicek_stan <- "
data {
int<lower=0> N; // Número de observaciones
vector[N] r; // Tasas de interés observadas
real<lower=0> dt; // Paso de tiempo entre observaciones
}
parameters {
real kappa; // Velocidad de reversión
real theta; // Nivel de largo plazo
real<lower=0> sigma; // Volatilidad
}
model {
// Priors
kappa ~ normal(0, 1);
theta ~ normal(0.0533, 0.1);
sigma ~ inv_gamma(0.5,  0.0197386575993247);
// Modelo de Vasicek
for (i in 2:N) {
r[i] ~ normal(kappa * (theta - r[i-1]) * dt + r[i-1], sigma * sqrt(dt));
}
}
"
# Compila el modelo
modelo_vasicek <- stan_model(model_code = modelo_vasicek_stan)
# Ajusta el modelo a los datos
ajuste_vasicek <- sampling(modelo_vasicek, data = datos_stan, iter = 10000, chains = 3)
# Revisa los resultados
print(ajuste_vasicek)
# Obtener el resumen del ajuste
summary_ajuste <- summary(ajuste_vasicek)
# --- ESTIMACION PARAMETROS BAYESIANA ---
media_kappa <- summary_ajuste$summary["kappa", "mean"]
media_theta <- summary_ajuste$summary["theta", "mean"]
media_sigma <- summary_ajuste$summary["sigma", "mean"]
# Trazar las densidades de traza con stan_trace
stan_trace(ajuste_vasicek, pars = c("kappa", "theta", "sigma"))
# Trazar las densidades de traza con stan_dens
stan_dens(ajuste_vasicek, pars = c("kappa", "theta", "sigma"))
# Define el modelo de Stan como una cadena de texto
modelo_vasicek_stan <- "
data {
int<lower=0> N; // Número de observaciones
vector[N] r; // Tasas de interés observadas
real<lower=0> dt; // Paso de tiempo entre observaciones
}
parameters {
real kappa; // Velocidad de reversión
real theta; // Nivel de largo plazo
real<lower=0> sigma; // Volatilidad
}
model {
// Priors
kappa ~ normal(0, 1);
theta ~ normal(0.0533, 0.05);
sigma ~ inv_gamma(0.5,  0.0197386575993247);
// Modelo de Vasicek
for (i in 2:N) {
r[i] ~ normal(kappa * (theta - r[i-1]) * dt + r[i-1], sigma * sqrt(dt));
}
}
"
# Compila el modelo
modelo_vasicek <- stan_model(model_code = modelo_vasicek_stan)
# Ajusta el modelo a los datos
ajuste_vasicek <- sampling(modelo_vasicek, data = datos_stan, iter = 20000, chains = 3)
# Revisa los resultados
print(ajuste_vasicek)
# Obtener el resumen del ajuste
summary_ajuste <- summary(ajuste_vasicek)
media_kappa <- summary_ajuste$summary["kappa", "mean"]
media_theta <- summary_ajuste$summary["theta", "mean"]
media_sigma <- summary_ajuste$summary["sigma", "mean"]
# Trazar las densidades de traza con stan_trace
stan_trace(ajuste_vasicek, pars = c("kappa", "theta", "sigma"))
# Trazar las densidades de traza con stan_dens
stan_dens(ajuste_vasicek, pars = c("kappa", "theta", "sigma"))
VasicekCalibration <- function(DATOS) {
# Calibrates the vasicek model using the maximum likelihood estimator. Details
# about the maximum likelihood extomator are at the link below.
#
# http://www.sitmo.com/article/calibrating-the-ornstein-uhlenbeck-model/
#
# TODO - Add in start and end dates.
#
# Args:
#   fred.ticker: Ticker used to download the historical rates from the Federal
#                Reserve Bank of St Louis. Defaults to DSG3MO, the 3-Month
#                Treasury Constant Maturity Rate.
#   dt: The change in time between observations. Defaults to 1/252 because
#       we assume generation of daily rates and there are 252 trading days
#       per year.
#
# Returns:
#   A vector of the form c(kappa, theta, sigma, r0), where kappa is the mean
#   reversion rate, theta is the long-term rate/mean, sigma is the volatility
#   and r0 is the last observed rate.
#
data <- DATOS
data <- na.omit(data)/100
n <- length(data)
# do the calculations
Sx <- sum(data[1:(length(data) - 1)])
Sy <- sum(data[2:length(data)])
Sxx <- as.numeric(crossprod(data[1:(length(data) - 1)], data[1:(length(data) - 1)]))
Sxy <- as.numeric(crossprod(data[1:(length(data) - 1)], data[2:length(data)]))
Syy <- as.numeric(crossprod(data[2:length(data)], data[2:length(data)]))
theta  <- (Sy * Sxx - Sx * Sxy) / (n* (Sxx - Sxy) - (Sx^2 - Sx*Sy) )
kappa <- -log((Sxy - theta * Sx - theta * Sy + n * theta^2) /   (Sxx - 2 * theta * Sx + n * theta^2)) / dt
a <- exp(-kappa*dt)
sigmah2 <- (Syy - 2 * a * Sxy + a^2 * Sxx - 2 * theta * (1-a) * (Sy - a * Sx) + n * theta^2 * (1 - a)^2)/n
sigma <- sqrt(sigmah2 * 2 * kappa / (1 - a^2))
r0 <- data[length(data)]
return(c(kappa, theta, sigma, r0))
}
calibration <- VasicekCalibration(data_df$X3.month)
calibration
kappaf <- calibration[1]
thetaf <- calibration[2]
sigmaf <- calibration[3]
parametros <- data.frame(
Modelo = c("Bayesiano", "Frecuentista"),
media_alpha = c(media_kappa, kappaf),
media_b = c(media_theta, thetaf),
media_sigma = c(media_sigma, sigmaf)
)
write.csv(parametros, "parametros_modelos.csv", row.names = FALSE)
kappaf
media_kappa
parametros <- data.frame(
Modelo = c("Bayesiano", "Frecuentista"),
media_alpha = c(media_kappa, kappaf),
media_b = c(media_theta, thetaf),
media_sigma = c(media_sigma, sigmaf)
)
write.csv(parametros, "parametros_modelos.csv", row.names = FALSE)
# Revisa los resultados
print(ajuste_vasicek)
parametros <- data.frame(
Modelo = c("Bayesiano", "Frecuentista"),
media_alpha = c(media_kappa, kappaf),
media_b = c(media_theta, thetaf),
media_sigma = c(media_sigma, sigmaf)
)
# --- ESTIMACION PARAMETROS BAYESIANA ---
media_kappa <- summary_ajuste$summary["kappa", "mean"]
media_theta <- summary_ajuste$summary["theta", "mean"]
media_sigma <- summary_ajuste$summary["sigma", "mean"]
calibration <- VasicekCalibration(data_df$X3.month)
calibration
kappaf <- calibration[1]
thetaf <- calibration[2]
sigmaf <- calibration[3]
parametros <- data.frame(
Modelo = c("Bayesiano", "Frecuentista"),
media_alpha = c(media_kappa, kappaf),
media_b = c(media_theta, thetaf),
media_sigma = c(media_sigma, sigmaf)
)
write.csv(parametros, "parametros_modeloss.csv", row.names = FALSE)
library(ggplot2)
library(tidyverse)
library(lubridate)
bonds <-  read.csv("BONDS.csv")
fomc <- read.csv("BONOS - FOMC.csv")
bonds$fecha <- dmy(bonds$Series.Description)
#descomposición de la serie temporal
serie_temporal <- ts(bonds$X3.month, frequency = 12)
decomp <- decompose(serie_temporal)
residuos <- serie_temporal - decomp$seasonal - decomp$trend - decomp$rando
aleatorios_3meses <- serie_temporal - decomp$seasonal - decomp$trend
fomc$fecha <- dmy(fomc$Series.Description)
serie_temporal_fomc <- ts(fomc$FOMC, frequency = 12)
decomp_fomc <- decompose(serie_temporal_fomc)
aleatorios_fomc <- serie_temporal_fomc - decomp_fomc$seasonal - decomp_fomc$trend
plot(x = bonds$fecha, y = bonds$X3.month, type = "l", col = "#b2001d", main = "Tasa bono de 3 meses", xlab = "Fecha", ylab = "Tasa de interés")
plot(x = fomc$fecha, y = fomc$FOMC, type = "l", col = "#b2001d", main = "Tasa FOMC", xlab = "Fecha", ylab = "Tasa de interés")
plot(y = aleatorios_3meses, x = bonds$fecha, type = "l", col = "#b2001d", main = "Volatilidad bono de 3 meses", ylab = "volatilidad")
plot(y = aleatorios_fomc, x = fomc$fecha, type = "l", col = "#b2001d", main = "Volatilidad de FOMC", ylab = "volatilidad")
